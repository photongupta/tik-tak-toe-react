{"version":3,"sources":["tiktaktoe/tile.js","tiktaktoe/gameBoard.js","tiktaktoe/status.js","tiktaktoe/restart.js","tiktaktoe/game.js","App.js","serviceWorker.js","index.js"],"names":["Tile","onClick","value","id","disabled","className","GameBoard","tiles","isGameOver","tileList","map","index","key","Status","winner","hasDrawn","currentPlayerName","status","Restart","Game","props","state","currentPlayer","player1","nextPlayer","player2","Array","fill","handlerClick","bind","resetDefault","tileId","this","setState","newTiles","slice","symbol","every","tile","currentPlayerSymbol","some","combination","hasWon","name","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d8c7ec6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Tile = function ({onClick, value, id}) {\n  return (\n    <button\n      disabled={value ? true : false}\n      className=\"tile\"\n      onClick={() => onClick(id)}\n    >\n      {value || id}\n    </button>\n  );\n};\n\nexport default Tile;\n","import React from 'react';\nimport Tile from './tile.js';\n\nconst GameBoard = function ({onClick, tiles, isGameOver}) {\n  const tileList = tiles.map((value, index) => (\n    <Tile value={value} key={index} id={index} onClick={onClick} />\n  ));\n\n  const className = isGameOver ? 'gameBoard disable' : 'gameBoard';\n  return <div className={className}>{tileList}</div>;\n};\n\nexport default GameBoard;\n","import React from 'react';\n\nconst Status = function ({winner, hasDrawn, currentPlayerName}) {\n  let status = `${currentPlayerName}'s turn`;\n  if (winner) {\n    status = `${winner} won the game`;\n  }\n  if (hasDrawn) {\n    status = 'Game draw';\n  }\n  return <p className=\"status\">{status}</p>;\n};\n\nexport default Status;\n","import React from 'react';\n\nconst Restart = function ({onClick}) {\n  return <button onClick={onClick}>Restart Game</button>;\n};\n\nexport default Restart;\n","import React from 'react';\nimport GameBoard from './gameBoard';\nimport Status from './status';\nimport Restart from './restart';\n\nconst hasWon = function (tiles, currentPlayerSymbol) {\n  const winningCombinations = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  return winningCombinations.some((combination) =>\n    combination.every((index) => tiles[index] === currentPlayerSymbol)\n  );\n};\n\nconst hasDrawn = function (tiles) {\n  return tiles.every((tile) => tile);\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPlayer: props.player1,\n      nextPlayer: props.player2,\n      tiles: Array(9).fill(null),\n      hasDrawn: false,\n      winner: null,\n    };\n    this.handlerClick = this.handlerClick.bind(this);\n    this.resetDefault = this.resetDefault.bind(this);\n  }\n\n  handlerClick(tileId) {\n    this.setState(({tiles, currentPlayer, nextPlayer}) => {\n      const newTiles = tiles.slice();\n      newTiles[tileId] = currentPlayer.symbol;\n\n      if (hasDrawn(newTiles)) {\n        return {tiles: newTiles, hasDrawn: true};\n      }\n\n      if (hasWon(newTiles, currentPlayer.symbol)) {\n        return {tiles: newTiles, winner: currentPlayer.name};\n      }\n\n      return {\n        tiles: newTiles,\n        currentPlayer: nextPlayer,\n        nextPlayer: currentPlayer,\n      };\n    });\n  }\n\n  resetDefault() {\n    this.setState(() => ({\n      currentPlayer: this.props.player1,\n      nextPlayer: this.props.player2,\n      tiles: Array(9).fill(null),\n      hasDrawn: false,\n      winner: null,\n    }));\n  }\n\n  render() {\n    const {tiles, currentPlayer, winner, hasDrawn} = this.state;\n    return (\n      <div>\n        <Status\n          currentPlayerName={currentPlayer.name}\n          hasDrawn={hasDrawn}\n          winner={winner}\n        />\n        <GameBoard\n          onClick={this.handlerClick}\n          tiles={tiles}\n          isGameOver={hasDrawn || winner}\n        />\n        <Restart onClick={this.resetDefault} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './tiktaktoe/game.js';\n\nconst App = function () {\n  return (\n    <div className=\"app\">\n      <header>Tik-Tak-Toe</header>\n      <Game\n        player1={{name: 'Player1', symbol: 'X'}}\n        player2={{name: 'Player2', symbol: 'O'}}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}